// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro
//#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
//#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

&mt {
    tapping-term-ms = <300>;
    flavor = "balanced";
};

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <32 31 30 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };

        comma_question: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            bindings = <&kp COMMA>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_exclamation: dot_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCLAMATION";
            bindings = <&kp DOT>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_rt: rpar_rt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_RT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hmr_lpar: hmr_lpar {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            label = "HMR_LPAR";
            bindings = <&kp>, <&lpar_lt>;
        };

        hmr_rpar: hmr_rpar {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            label = "HMR_RPAR";
            bindings = <&kp>, <&rpar_rt>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 2>;
            then-layer = <2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_underscore {
            bindings = <&kp UNDER>;
            key-positions = <25 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <15 5>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <26 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <7 17>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_fslh {
            bindings = <&kp SLASH>;
            key-positions = <27 17>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_ampersand {
            bindings = <&kp AMPS>;
            key-positions = <8 18>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <28 18>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <1 11>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <11 21>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_bslh {
            bindings = <&kp BSLH>;
            key-positions = <12 22>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <13 23>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <14 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <24 14>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_lpar {
            bindings = <&hmr_lpar RC(RSHFT) 0>;
            key-positions = <16 17>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_rpar {
            bindings = <&hmr_rpar RC(RALT) 0>;
            key-positions = <17 18>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_bckspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 6>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0 2>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <26 27>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <27 28>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_tab {
            bindings = <&hml LC(LEFT_ALT) TAB>;
            key-positions = <11 12>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_tab2 {
            bindings = <&hml LC(LSHFT) LEFT_ALT>;
            key-positions = <12 13>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 23>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            timeout-ms = <18>;
            require-prior-idle-ms = <50>;
            layers = <0 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R              &kp T      &kp Y   &kp U          &kp I            &kp O             &kp P
&hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G      &kp H   &hmr RSHFT J   &hmr RCTRL K     &hmr RIGHT_ALT L  &hmr RGUI SEMI
&kp Z        &kp X        &kp C         &kp V              &kp B      &kp N   &kp M          &comma_question  &dot_exclamation  &kp APOS
                                        &lt 1 SPACE        &kp RET    &trans  &kp BACKSPACE
            >;
        };

        nav {
            bindings = <
&none  &none  &none  &none  &none    &none  &none     &kp UP    &none      &none
&none  &none  &none  &none  &none    &none  &kp LEFT  &kp DOWN  &kp RIGHT  &none
&none  &none  &none  &none  &none    &none  &none     &none     &none      &none
                     &none  &none    &none  &none
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
